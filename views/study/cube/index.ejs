<!doctype html>
<html>
<head>
    <style rel="stylesheet">
        @import url("https://webgl2fundamentals.org/webgl/resources/webgl-tutorials.css");
        body {
            margin: 0;
        }
        canvas {
            width: 50vw;
            height: 50vh;
            margin-left: 25vw;
            margin-top: 25vh;
            display: block;
        }

    </style>
</head>
<body>
<canvas id="c"></canvas>
</body>
<script src="https://webgl2fundamentals.org/webgl/resources/webgl-utils.js"></script>
<script>
    let main = () => {
        'use strict';

        const vertexShaderSource = `#version 300 es

            // attribute는 버텍스 쉐이더에 대한 입력(in)입니다.
            // 버퍼로 부터 받은 데이터입니다.
            in vec2 a_position;

            uniform vec2 u_resolution;

            void main() {
                // 픽셀 위치를 0.0에서 1.0로 변환합니다.
                vec2 zeroToOne = a_position / u_resolution;

                // 0 -> 1에서 0 -> 2로 변환
                vec2 zeroToTwo = zeroToOne * 2.0;

                // 0 -> 2 에서 -1 -> +1 변환(클립 공간)
                vec2 clipSpace = zeroToTwo - 1.0;

                gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
            }
        `;

        const fragmentShaderSource = `#version 300 es

            // 프래그먼트 쉐이더는 기본 정밀도를 가지고 있지 않으므로 선언을 해야합니다.
            // mediump은 기본값으로 적당합니다. "중간 정도 정밀도"를 의미합니다.
            precision mediump float;

            // 프래그먼트 쉐이더(fragment shader)에서 출력을 선언 해야합니다.
            uniform vec4 u_color;

            out vec4 outColor;

            void main() {
                // 붉은-보라색으로 출력하게 설정합니다.
                outColor = u_color;
            }
        `;

        const createShader = (gl, type, source) => {
            let shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            let suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
            if (suc) {
                return shader;
            }

            gl.deleteShader(shader);
        };

        const createProgram = (gl, vertexShader, fragmentShader) => {
            let program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            let suc = gl.getProgramParameter(program, gl.LINK_STATUS);
            if (suc) {
                return program;
            }

            gl.deleteProgram(program);
        };

        let canvas = document.getElementById('c');
        let gl = canvas.getContext('webgl2');
        if (!gl) {
            alert('webgl이 작동하지 않습니다.');
            return false;
        }

        let centerX = 400;
        let centerY = 250;

        let vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
        let fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);

        let program = createProgram(gl, vertexShader, fragmentShader);

        let attributeLocation = gl.getAttribLocation(program, 'a_position');
        var resolutionUniformLocation = gl.getUniformLocation(program, "u_resolution");
        let positionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

        const xCoordinate = (a, b, c, d) => {
            return Math.floor((a + c) / 2 - Math.floor(Math.sqrt(3) * (d - b)) / 2);
        }

        const yCoordinate = (a, b, c, d) => {
            return Math.floor((b + d) / 2 + Math.floor(Math.sqrt(3) * (c - a)) / 2);
        }

        const xReverseCoordinate = (a, b, c, d) => {
            return Math.floor((a + c) / 2 + Math.floor(Math.sqrt(3) * (d - b)) / 2);
        }

        const yReverseCoordinate = (a, b, c, d) => {
            return Math.floor((b + d) / 2 - Math.floor(Math.sqrt(3) * (c - a)) / 2);
        }

        const addXCoordinate = (b, d) => {
            return Math.floor(Math.sqrt(3) * (d - b));
        }

        var positions = [
            centerX, centerY + 50,
            centerX, centerY + 100,
            xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
            xReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50), yReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50),
            xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
            centerX, centerY + 50,

            centerX, centerY + 50,
            centerX, centerY + 100,
            xCoordinate(centerX, centerY + 50, centerX, centerY + 100) + addXCoordinate( centerY + 50,  centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
            xReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50) + addXCoordinate( centerY + 50,  centerY + 100), yReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50),
            xCoordinate(centerX, centerY + 50, centerX, centerY + 100) + addXCoordinate( centerY + 50,  centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
            centerX, centerY + 50,

            centerX, centerY + 50,
            centerX, centerY + 100,
            xCoordinate(centerX, centerY + 50, centerX, centerY + 100) + addXCoordinate( centerY + 50,  centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
            xReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50) + addXCoordinate( centerY + 50,  centerY + 100), yReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50),
            xCoordinate(centerX, centerY + 50, centerX, centerY + 100) + addXCoordinate( centerY + 50,  centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
            centerX, centerY + 50,

            xCoordinate(centerX, centerY + 50, centerX, centerY + 100) + addXCoordinate( centerY + 50,  centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
            xReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50) + addXCoordinate( centerY + 50,  centerY + 100), yReverseCoordinate(xCoordinate(centerX, centerY + 50, centerX, centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100), centerX, centerY + 50),
            xCoordinate(centerX, centerY + 50, centerX, centerY + 100) + addXCoordinate( centerY + 50,  centerY + 100), yCoordinate(centerX, centerY + 50, centerX, centerY + 100),
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

        let vao = gl.createVertexArray();
        gl.bindVertexArray(vao);
        gl.enableVertexAttribArray(attributeLocation);

        let size = 2;          // 한번 실행할 때마다 2개 구성 요소 사용
        let type = gl.FLOAT;   // 데이터는 32비트 소수점
        let normalize = false; // 정규화 되지 않은 데이터
        let stride = 0;        // 0 은 실행할 떄마다 `size * sizeof(type)`만큼 다음 위치로 이동합니다.
        let offset = 0;        // 버퍼 처음 부터 시작한다.
        gl.vertexAttribPointer(
            attributeLocation, size, type, normalize, stride, offset)

        webglUtils.resizeCanvasToDisplaySize(gl.canvas);

        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        gl.useProgram(program);
        let colorLocation = gl.getUniformLocation(program, "u_color");
        gl.uniform4f(colorLocation, Math.random(), Math.random(), Math.random(), 1);
        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);

        gl.bindVertexArray(vao);

        gl.drawArrays(gl.TRIANGLES, 0, 12);
    };

    main();
</script>
</html>